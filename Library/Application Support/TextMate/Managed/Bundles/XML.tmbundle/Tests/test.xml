<?xml version="1.0" ?>
<%@ page whatever="foo" %>
<%!
    String bar = "foo";
%>
<!DOCTYPE rdf:RDF [
    <!ENTITY rdf "http://www.w3.org/1999/02/22-rdf-syntax-ns#">
]>

<rdf:testtag rdf:attribute="value" />

<invalid "tag" attribute=/>

<project name="CDA" default="compile" basedir=".">
    <property environment="env" />

    <property file="${user.home}/.build.properties"/>
    <property file="build.properties"/>

    <property name="env.COMPUTERNAME" value="${env.HOSTNAME}"/>

    <property name="app.name"        value="${ant.project.name}" />
    <property name="app.version"    value="0.1" />
    <property name="app.path"        value="/${app.name}" />

    <property name="build.home"        value="${basedir}/build" />

    <property name="dist.home" value="${basedir}/dist" />
    <property name="docs.home" value="${basedir}/doc" />
    <property name="src.home"  value="${basedir}/src" />
    <property name="web.home"  value="${basedir}/web" />

    <taskdef resource="svnbuild.properties" />
    <svnbuild />


    <%
        String foo = "bar";
        System.out.println();
        
        
        void foo () {
        
        }
    %>

    <%--
        comment
    --%>

    <%= Long.toString(32L) %>

    <!--  ==================== Compilation Control Options -->
    <!--
        These properties control option settings on the Javac compiler when it
        is invoked using the <javac/> task.

        compile.debug        Should compilation include the debug option?
        compile.deprecation  Should compilation include the deprecation option?
        compile.optimize     Should compilation include the optimize option?
    -->
    <property name="compile.debug"       value="true"/>
    <property name="compile.deprecation" value="false"/>
    <property name="compile.optimize"    value="true"/>

    <path id="webconnect.path">
        <pathelement location="${webconnect.lib}/martini.jar" />
    </path>

    <!-- ==================== Compilation Classpath  -->
    <path id="compile.classpath">
        <fileset dir="${web.home}/webconnect/WEB-INF/lib" includes="**/*.jar" />
        <path refid="webconnect.path" />
        <pathelement location="${classes.home}/j2ee12.jar" />
        <pathelement location="${classes.home}/activation.jar" />
        <pathelement location="${classes.home}/mail.jar" />
    </path>

    <!-- ==================== Clean Target -->
    <target name="clean"
            description="Delete old build and dist directories">
        <delete dir="${build.home}" />
        <delete dir="${dist.home}" />
    </target>

    <!-- ==================== Compile Target -->
    <target name="compile"
            depends="prepare"
            description="Compile Java sources">

        <!-- Copy application resources -->
        <copy todir="${build.home}/WEB-INF/classes">
            <fileset dir="${src.home}" excludes="**/*.java" />
        </copy>

        <copy todir="${build.home}">
            <fileset dir="${web.home}/webconnect">
                <exclude name="BIZMEDIA MOVED" />
            </fileset>
        </copy>

        <!-- Compile Java classes as necessary -->
        <javac srcdir="${src.home}"
                destdir="${build.home}/WEB-INF/classes"
                debug="${compile.debug}"
                deprecation="${compile.deprecation}"
                optimize="${compile.optimize}">

            <classpath refid="compile.classpath" />
        </javac>

        <propertyfile comment="Build Information"
                       file="${build.home}/WEB-INF/classes/build.properties">
            <entry key="build.date" type="date" value="now" pattern="EEEE MMM dd, yyyy" />
            <entry key="build.time" type="date" value="now" pattern="kk:mm:ss" />

            <entry key="build.host"      value="${env.COMPUTERNAME}" />
            <entry key="build.user.name" value="${user.name}" />
            <entry key="build.os.name"   value="${os.name}" />

            <entry key="svn.revision"   value="${svn.revision}" />
            <entry key="svn.modified"   value="${svn.modified}" />
            <entry key="svn.tag"        value="${svn.tag}" />
            <entry key="svn.buildnum"   value="${svn.buildnum}" />
            <entry key="svn.repository" value="${svn.repository}" />
        </propertyfile>
    </target>

    <!-- ==================== Javadoc Target -->
    <target name="javadoc" depends="compile"
            description="Create Javadoc API documentation">

        <mkdir dir="${dist.home}/docs/api"/>
        <javadoc sourcepath="${src.home}"
                 destdir="${dist.home}/docs/api"
                 packagenames="*">
            <classpath>
                <path refid="compile.classpath" />
                <pathelement location="${build.home}" />
            </classpath>
        </javadoc>
    </target>

    <!-- ==================== Prepare Target -->
    <target name="prepare">
        <!-- Create build directories as needed -->
        <mkdir dir="${dist.home}" />
        <mkdir dir="${build.home}" />
        <mkdir dir="${build.home}/WEB-INF" />
        <mkdir dir="${build.home}/WEB-INF/classes" />
    </target>
</project>
